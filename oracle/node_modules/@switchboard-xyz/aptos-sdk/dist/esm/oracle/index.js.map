{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/oracle/index.ts"],"names":[],"mappings":"AA2BA,MAAM,OAAO,MAAM;IACjB,YAAqB,MAAyB,EAAW,OAAe;QAAnD,WAAM,GAAN,MAAM,CAAmB;QAAW,YAAO,GAAP,OAAO,CAAQ;IAAG,CAAC;IAE5E;;OAEG;IACI,MAAM,CAAC,KAAK,CAAC,MAAM,CACxB,MAAyB,EACzB,MAAc,EACd,OAAyB;QAEzB,MAAM,EAAE,kBAAkB,EAAE,GAAG,MAAM,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAEhE,IAAI,OAAO,CAAC,UAAU,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC;YACjD,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;QACpE,CAAC;aAAM,IAAI,CAAC,OAAO,CAAC,UAAU,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;YACvD,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;QACzD,CAAC;QAED,OAAO,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC;YAC3C,MAAM;YACN,IAAI,EAAE;gBACJ,QAAQ,EAAE,GAAG,kBAAkB,2BAA2B;gBAC1D,iBAAiB,EAAE;oBACjB,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW;oBAChE,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;iBAClD;aACF;SACF,CAAC,CAAC;IACL,CAAC;CAKF","sourcesContent":["import {\n  SwitchboardClient,\n  CommonOptions,\n} from \"../index.js\";\nimport { SimpleTransaction } from \"@aptos-labs/ts-sdk\";\n\nexport interface OracleInitParams extends CommonOptions {\n  oracleKey: string;\n  isGuardian?: boolean;\n}\n\nexport interface OracleAttestParams extends CommonOptions {\n  minAttestations: number;\n  isGuardian?: boolean;\n  solanaRPCUrl?: string;\n}\nexport interface OracleData {\n  expirationTime: number;\n  address: string;\n  mrEnclave: string;\n  oracleKey: string;\n  queue: string;\n  queueKey: string;\n  secp256k1Key: string;\n  validAttestations: any[];\n}\n\nexport class Oracle {\n  constructor(readonly client: SwitchboardClient, readonly address: string) {}\n\n  /**\n   * Create a new Oracle\n   */\n  public static async initTx(\n    client: SwitchboardClient,\n    sender: string,\n    options: OracleInitParams\n  ): Promise<SimpleTransaction> {\n    const { switchboardAddress } = await client.fetchState(options);\n\n    if (options.isGuardian && !options.guardianQueue) {\n      throw new Error(\"Guardian queue is required for guardian oracle\");\n    } else if (!options.isGuardian && !options.oracleQueue) {\n      throw new Error(\"Oracle queue is required for oracle\");\n    }\n\n    return client.aptos.transaction.build.simple({\n      sender,\n      data: {\n        function: `${switchboardAddress}::oracle_init_action::run`,\n        functionArguments: [\n          options.isGuardian ? options.guardianQueue : options.oracleQueue,\n          Array.from(Buffer.from(options.oracleKey, \"hex\")),\n        ],\n      },\n    });\n  }\n\n  /**\n   * TODO: Oracle attest TX [switchboard internal]\n   */\n}\n"]}