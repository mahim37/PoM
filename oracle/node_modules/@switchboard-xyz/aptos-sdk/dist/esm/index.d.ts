import { TTLCache } from "@brokerloop/ttlcache";
import { Queue as SolanaQueue } from "@switchboard-xyz/on-demand";
import { Aptos, Network, ClientRequest, ClientResponse, MoveVector, U8 } from "@aptos-labs/ts-sdk";
import type { QueueData } from "./queue/index.js";
export * from "./aggregator/index.js";
export * from "./oracle/index.js";
export * from "./queue/index.js";
export * from "@switchboard-xyz/common";
export declare const ON_DEMAND_MAINNET_QUEUE_KEY: string;
export declare const ON_DEMAND_DEVNET_QUEUE_KEY: string;
export declare const ON_DEMAND_MAINNET_ADDRESS = "0xfea54925b5ac1912331e2e62049849b37842efaea298118b66f85a59057752b8";
export declare const ON_DEMAND_MAINNET_QUEUE = "0x7fdf7235bf3bd872ad093927deb2ff5f1645d1b6dabbfd4a03c3e0442788ce12";
export declare const ON_DEMAND_MAINNET_GUARDIAN_QUEUE = "0x3434a45114f5f8fc577557a9a3dda54c1799fee5271313f2599a1093c4a8ba01";
export declare const ON_DEMAND_TESTNET_ADDRESS = "0x4fc1809ffb3c5ada6b4e885d4dbdbeb70cbdd99cbc0c8485965d95c2eab90935";
export declare const ON_DEMAND_TESTNET_QUEUE = "0xe898232691709ed4f47827a100aac2ca8ea5b27692b5d694b00cb4b2c714e760";
export declare const ON_DEMAND_TESTNET_GUARDIAN_QUEUE = "0x17ce931b15d5c4ca8f8e6a5b6b84e2aee44002e5fc5cb4cf00817bb462b56c4a";
export declare const ON_DEMAND_MOVEMENT_PORTO_ADDRESS = "0xfa416028d48a85cd7791c8a93c438ce8a750af333a53fde55b276fd4aa16275f";
export declare const ON_DEMAND_MOVEMENT_PORTO_QUEUE = "0x4e445d2968329979b34df2606a65e962ad15a540885fdcbb19eaf7a2a5bf4a22";
export declare const ON_DEMAND_MOVEMENT_PORTO_GUARDIAN_QUEUE = "0x63be642227d71ba56713d2cdb2efd13de0fb7d9783761e4d7f18327c7336f994";
export declare const aptosQueueCache: TTLCache<string, QueueData>;
export declare const solanaProgramCache: TTLCache<string, SolanaQueue>;
export interface SwitchboardState {
    switchboardAddress: string;
    guardianQueue: string;
    oracleQueue: string;
    mainnet: boolean;
}
export interface CommonOptions {
    switchboardAddress?: string;
    guardianQueue?: string;
    oracleQueue?: string;
    network?: Network;
}
export declare class SwitchboardClient {
    readonly aptos: Aptos;
    readonly chain?: string;
    state: Promise<SwitchboardState | undefined>;
    constructor(aptos: Aptos, chain?: string);
    /**
     * Fetch the correct addresses for the current network
     * @param retries Number of retries to fetch the state
     */
    fetchState(options?: CommonOptions, retries?: number): Promise<SwitchboardState>;
}
export declare function axiosAptosClient<Req, Res>(requestOptions: ClientRequest<Req>): Promise<ClientResponse<Res>>;
export declare function waitForTx(aptos: Aptos, transactionHash: string, maxRetries?: number, initialDelay?: number): Promise<import("@aptos-labs/ts-sdk").CommittedTransactionResponse>;
export declare function updateToBCS(update: number[][]): MoveVector<MoveVector<U8>>;
//# sourceMappingURL=index.d.ts.map