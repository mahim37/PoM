{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/queue/index.ts"],"names":[],"mappings":"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","sourcesContent":["import type { CommonOptions, OracleData, SwitchboardClient } from \"../index.js\";\nimport { SimpleTransaction } from \"@aptos-labs/ts-sdk\";\nimport { bs58 } from \"@switchboard-xyz/common\";\n\nexport interface QueueInitParams extends CommonOptions {\n  queueKey: string;\n  authority: string;\n  name: string;\n  fee: number;\n  feeRecipient: string;\n  minAttestations: number;\n  oracleValidityLength: number;\n  guardianQueue?: string;\n  isGuardianQueue?: boolean;\n}\n\nexport interface QueueSetConfigsParams extends CommonOptions {\n  name: string;\n  fee: number;\n  feeRecipient: string;\n  minAttestations: number;\n  oracleValidityLength: number;\n}\n\nexport interface QueueSetAuthorityParams extends CommonOptions {\n  newAuthority: string;\n}\n\nexport interface QueueOverrideOracleParams extends CommonOptions {\n  oracle: string;\n  secp256k1Key: Uint8Array;\n  mrEnclave: Uint8Array;\n  expirationTime: number;\n}\n\nexport interface QueueSetFeeTypeParams extends CommonOptions {\n  feeType: string;\n}\n\nexport interface QueueData {\n  authority: string;\n  existingOracles: {\n    oracle: string;\n    oracleKey: string;\n  }[];\n  fee: number;\n  feeRecipient: string;\n  feeTypes: string[];\n  guardianQueue: string;\n  address: string;\n  lastQueueOverride: number;\n  minAttestations: number;\n  name: string;\n  oracleValidityLength: number;\n  queueKey: string;\n}\n\nexport class Queue {\n  constructor(readonly client: SwitchboardClient, readonly address: string) {}\n\n  /**\n   * Create a new Queue\n   */\n  public static async initTx(\n    client: SwitchboardClient,\n    sender: string,\n    options: QueueInitParams\n  ): Promise<SimpleTransaction> {\n    const { switchboardAddress } = await client.fetchState(options);\n    if (options.isGuardianQueue) {\n      return client.aptos.transaction.build.simple({\n        sender,\n        data: {\n          function: `${switchboardAddress}::guardian_queue_init_action::run`,\n          functionArguments: [\n            Array.from(Buffer.from(options.queueKey, \"hex\")),\n            options.name,\n            options.fee,\n            options.feeRecipient,\n            options.minAttestations,\n            options.oracleValidityLength,\n          ],\n        },\n      });\n    } else {\n      if (!options.guardianQueue) {\n        throw new Error(\"guardianQueueId is required for non-guardian queues\");\n      }\n      return client.aptos.transaction.build.simple({\n        sender,\n        data: {\n          function: `${switchboardAddress}::oracle_queue_init_action::run`,\n          functionArguments: [\n            Array.from(Buffer.from(options.queueKey, \"hex\")),\n            options.name,\n            options.fee,\n            options.feeRecipient,\n            options.minAttestations,\n            options.oracleValidityLength,\n            options.guardianQueue,\n          ],\n        },\n      });\n    }\n  }\n\n  /**\n   * Queue set configs tx\n   */\n  public async setConfigsTx(\n    sender: string,\n    options: QueueSetConfigsParams\n  ): Promise<SimpleTransaction> {\n    const { switchboardAddress } = await this.client.fetchState(options);\n    return this.client.aptos.transaction.build.simple({\n      sender,\n      data: {\n        function: `${switchboardAddress}::queue_set_configs_action::run`,\n        functionArguments: [\n          this.address,\n          options.name,\n          options.fee,\n          options.feeRecipient,\n          options.minAttestations,\n          options.oracleValidityLength,\n        ],\n      },\n    });\n  }\n\n  /**\n   * Queue set authority tx\n   */\n  public async setAuthorityTx(\n    sender: string,\n    options: QueueSetAuthorityParams\n  ): Promise<SimpleTransaction> {\n    const { switchboardAddress } = await this.client.fetchState(options);\n    return this.client.aptos.transaction.build.simple({\n      sender,\n      data: {\n        function: `${switchboardAddress}::queue_set_authority_action::run`,\n        functionArguments: [this.address, options.newAuthority],\n      },\n    });\n  }\n\n  /**\n   * Queue override oracle tx\n   */\n  public async overrideOracleTx(\n    sender: string,\n    options: QueueOverrideOracleParams\n  ): Promise<SimpleTransaction> {\n    const { switchboardAddress } = await this.client.fetchState(options);\n    return this.client.aptos.transaction.build.simple({\n      sender,\n      data: {\n        function: `${switchboardAddress}::queue_override_oracle_action::run`,\n        functionArguments: [\n          this.address,\n          options.oracle,\n          Array.from(options.secp256k1Key),\n          Array.from(options.mrEnclave),\n          options.expirationTime,\n        ],\n      },\n    });\n  }\n\n  /**\n   * Queue add fee type tx\n   */\n  public async addFeeTypeTx(sender: string, options: QueueSetFeeTypeParams) {\n    const { switchboardAddress } = await this.client.fetchState(options);\n    return this.client.aptos.transaction.build.simple({\n      sender,\n      data: {\n        function: `${switchboardAddress}::queue_add_fee_coin_action::run`,\n        functionArguments: [this.address],\n        typeArguments: [options.feeType],\n      },\n    });\n  }\n\n  /**\n   * Queue remove fee type tx\n   */\n  public async removeFeeTypeTx(sender: string, options: QueueSetFeeTypeParams) {\n    const { switchboardAddress } = await this.client.fetchState(options);\n    return this.client.aptos.transaction.build.simple({\n      sender,\n      data: {\n        function: `${switchboardAddress}::queue_remove_fee_coin_action::run`,\n        functionArguments: [this.address],\n        typeArguments: [options.feeType],\n      },\n    });\n  }\n\n  private formatType(type: {\n    account_address: string;\n    module_name: string;\n    struct_name: string;\n  }): string {\n    const decodedModuleName = Buffer.from(\n      type.module_name.slice(2),\n      \"hex\"\n    ).toString(\"utf-8\");\n    const decodedStructName = Buffer.from(\n      type.struct_name.slice(2),\n      \"hex\"\n    ).toString(\"utf-8\");\n\n    return `${type.account_address}::${decodedModuleName}::${decodedStructName}`;\n  }\n\n  /**\n   * Get the queue data object\n   */\n  public async loadData(): Promise<QueueData> {\n    const { switchboardAddress } = await this.client.fetchState();\n\n    const resources = await this.client.aptos.view({\n      payload: {\n        function: `${switchboardAddress}::queue::view_queue`,\n        functionArguments: [this.address],\n      },\n    });\n\n    const resource = resources[0] as any;\n\n    // parse the data into the correct types\n    const data: QueueData = {\n      authority: resource.authority,\n      existingOracles: resource.all_oracles.map((o: any) => ({\n        oracle: o.oracle,\n        oracleKey: bs58.encode(Buffer.from(o.oracle_key.slice(2), \"hex\")),\n      })),\n      fee: parseInt(resource.fee),\n      feeRecipient: resource.fee_recipient,\n      feeTypes: resource.fee_types.map((ft: any) => this.formatType(ft)),\n      guardianQueue: resource.guardian_queue,\n      address: this.address,\n      lastQueueOverride: parseInt(resource.last_queue_override),\n      minAttestations: parseInt(resource.min_attestations),\n      name: resource.name,\n      oracleValidityLength: parseInt(resource.oracle_validity_length),\n      queueKey: bs58.encode(Buffer.from(resource.queue_key.slice(2), \"hex\")),\n    };\n\n    return data;\n  }\n\n  public async loadOracles(): Promise<OracleData[]> {\n    const { switchboardAddress } = await this.client.fetchState();\n    const resourcesResponse = await this.client.aptos.view({\n      payload: {\n        function: `${switchboardAddress}::oracle::view_queue_oracles`,\n        functionArguments: [this.address],\n      },\n    });\n\n    if (resourcesResponse.length === 0) {\n      return [];\n    }\n\n    const resources = resourcesResponse[0] as any;\n\n    const oracles: OracleData[] = resources.map((resource: any) => {\n      return {\n        expirationTime: parseInt(resource.expiration_time),\n        address: resource.oracle_address,\n        mrEnclave: resource.mr_enclave,\n        oracleKey: bs58.encode(\n          Buffer.from(resource.oracle_key.slice(2), \"hex\")\n        ),\n        queue: resource.queue,\n        queueKey: bs58.encode(Buffer.from(resource.queue_key.slice(2), \"hex\")),\n        secp256k1Key: resource.secp256k1_key,\n        validAttestations: resource.valid_attestations,\n      };\n    });\n    return oracles;\n  }\n}\n"]}