import type { CommonOptions, OracleData, SwitchboardClient } from "../index.js";
import { SimpleTransaction } from "@aptos-labs/ts-sdk";
export interface QueueInitParams extends CommonOptions {
    queueKey: string;
    authority: string;
    name: string;
    fee: number;
    feeRecipient: string;
    minAttestations: number;
    oracleValidityLength: number;
    guardianQueue?: string;
    isGuardianQueue?: boolean;
}
export interface QueueSetConfigsParams extends CommonOptions {
    name: string;
    fee: number;
    feeRecipient: string;
    minAttestations: number;
    oracleValidityLength: number;
}
export interface QueueSetAuthorityParams extends CommonOptions {
    newAuthority: string;
}
export interface QueueOverrideOracleParams extends CommonOptions {
    oracle: string;
    secp256k1Key: Uint8Array;
    mrEnclave: Uint8Array;
    expirationTime: number;
}
export interface QueueSetFeeTypeParams extends CommonOptions {
    feeType: string;
}
export interface QueueData {
    authority: string;
    existingOracles: {
        oracle: string;
        oracleKey: string;
    }[];
    fee: number;
    feeRecipient: string;
    feeTypes: string[];
    guardianQueue: string;
    address: string;
    lastQueueOverride: number;
    minAttestations: number;
    name: string;
    oracleValidityLength: number;
    queueKey: string;
}
export declare class Queue {
    readonly client: SwitchboardClient;
    readonly address: string;
    constructor(client: SwitchboardClient, address: string);
    /**
     * Create a new Queue
     */
    static initTx(client: SwitchboardClient, sender: string, options: QueueInitParams): Promise<SimpleTransaction>;
    /**
     * Queue set configs tx
     */
    setConfigsTx(sender: string, options: QueueSetConfigsParams): Promise<SimpleTransaction>;
    /**
     * Queue set authority tx
     */
    setAuthorityTx(sender: string, options: QueueSetAuthorityParams): Promise<SimpleTransaction>;
    /**
     * Queue override oracle tx
     */
    overrideOracleTx(sender: string, options: QueueOverrideOracleParams): Promise<SimpleTransaction>;
    /**
     * Queue add fee type tx
     */
    addFeeTypeTx(sender: string, options: QueueSetFeeTypeParams): Promise<SimpleTransaction>;
    /**
     * Queue remove fee type tx
     */
    removeFeeTypeTx(sender: string, options: QueueSetFeeTypeParams): Promise<SimpleTransaction>;
    private formatType;
    /**
     * Get the queue data object
     */
    loadData(): Promise<QueueData>;
    loadOracles(): Promise<OracleData[]>;
}
//# sourceMappingURL=index.d.ts.map