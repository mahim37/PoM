{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { TTLCache } from \"@brokerloop/ttlcache\";\nimport { \n  Queue as SolanaQueue, \n  ON_DEMAND_DEVNET_QUEUE as SWITCHBOARD_DEVNET_QUEUE,\n  ON_DEMAND_MAINNET_QUEUE as SWITCHBOARD_MAINNET_QUEUE,\n} from \"@switchboard-xyz/on-demand\";\nimport {\n  Aptos,\n  Network,\n  ClientRequest,\n  ClientResponse,\n  MoveVector,\n  U8,\n} from \"@aptos-labs/ts-sdk\";\nimport { AxiosRequestConfig, default as axios } from \"axios\";\n\nimport type { QueueData } from \"./queue/index.js\";\nexport * from \"./aggregator/index.js\";\nexport * from \"./oracle/index.js\";\nexport * from \"./queue/index.js\";\nexport * from \"@switchboard-xyz/common\";\n\nexport const ON_DEMAND_MAINNET_QUEUE_KEY = SWITCHBOARD_MAINNET_QUEUE.toBase58();\nexport const ON_DEMAND_DEVNET_QUEUE_KEY = SWITCHBOARD_DEVNET_QUEUE.toBase58();\n\nexport const ON_DEMAND_MAINNET_ADDRESS = \"0xfea54925b5ac1912331e2e62049849b37842efaea298118b66f85a59057752b8\";\nexport const ON_DEMAND_MAINNET_QUEUE = \"0x7fdf7235bf3bd872ad093927deb2ff5f1645d1b6dabbfd4a03c3e0442788ce12\";\nexport const ON_DEMAND_MAINNET_GUARDIAN_QUEUE = \"0x3434a45114f5f8fc577557a9a3dda54c1799fee5271313f2599a1093c4a8ba01\";\n\nexport const ON_DEMAND_TESTNET_ADDRESS = \"0x4fc1809ffb3c5ada6b4e885d4dbdbeb70cbdd99cbc0c8485965d95c2eab90935\";\nexport const ON_DEMAND_TESTNET_QUEUE = \"0xe898232691709ed4f47827a100aac2ca8ea5b27692b5d694b00cb4b2c714e760\";\nexport const ON_DEMAND_TESTNET_GUARDIAN_QUEUE = \"0x17ce931b15d5c4ca8f8e6a5b6b84e2aee44002e5fc5cb4cf00817bb462b56c4a\";\n\nexport const ON_DEMAND_MOVEMENT_PORTO_ADDRESS = \"0xfa416028d48a85cd7791c8a93c438ce8a750af333a53fde55b276fd4aa16275f\";\nexport const ON_DEMAND_MOVEMENT_PORTO_QUEUE = \"0x4e445d2968329979b34df2606a65e962ad15a540885fdcbb19eaf7a2a5bf4a22\";\nexport const ON_DEMAND_MOVEMENT_PORTO_GUARDIAN_QUEUE = \"0x63be642227d71ba56713d2cdb2efd13de0fb7d9783761e4d7f18327c7336f994\";\n\n// ==============================================================================\n// Caching for Fetch Update Ix\n\n// 1 min cache for sui cache\nexport const aptosQueueCache = new TTLCache<string, QueueData>({\n  ttl: 1000 * 60,\n});\n\n// 5 min solana queue cache - reloads the sol program every 5 minutes max\nexport const solanaProgramCache = new TTLCache<string, SolanaQueue>({\n  ttl: 1000 * 60 * 5,\n});\n\n// ==============================================================================\n\nexport interface SwitchboardState {\n  switchboardAddress: string;\n  guardianQueue: string;\n  oracleQueue: string;\n  mainnet: boolean;\n}\n\nexport interface CommonOptions {\n  switchboardAddress?: string;\n  guardianQueue?: string;\n  oracleQueue?: string;\n  network?: Network;\n}\n\nexport class SwitchboardClient {\n  state: Promise<SwitchboardState | undefined>;\n\n  constructor(readonly aptos: Aptos, readonly chain?: string) {\n    this.state = this.fetchState();\n  }\n\n  /**\n   * Fetch the correct addresses for the current network\n   * @param retries Number of retries to fetch the state\n   */\n  async fetchState(\n    options?: CommonOptions,\n    retries: number = 3\n  ): Promise<SwitchboardState> {\n    if (retries <= 0) {\n      throw new Error(\n        \"Failed to fetch Switchboard state after multiple attempts\"\n      );\n    }\n\n\n    const isMainnet = this.aptos.config.network === Network.MAINNET;\n    const isAptos = this.chain === \"aptos\" || !this.chain;\n\n    try {\n      if (Network.MAINNET === this.aptos.config.network && isAptos) {\n        return {\n          switchboardAddress:\n            options?.switchboardAddress ??\n            ON_DEMAND_MAINNET_ADDRESS,\n          guardianQueue: options?.guardianQueue ?? ON_DEMAND_MAINNET_GUARDIAN_QUEUE,\n          oracleQueue: options?.oracleQueue ?? ON_DEMAND_MAINNET_QUEUE,\n          mainnet: isMainnet,\n        }\n      } else if (Network.TESTNET === this.aptos.config.network && isAptos) {\n        return {\n          switchboardAddress:\n            options?.switchboardAddress ??\n            ON_DEMAND_TESTNET_ADDRESS,\n          guardianQueue: options?.guardianQueue ?? ON_DEMAND_TESTNET_GUARDIAN_QUEUE,\n          oracleQueue: options?.oracleQueue ?? ON_DEMAND_TESTNET_QUEUE,\n          mainnet: isMainnet,\n        };\n      } else if (this.chain === \"porto\") {\n        return {\n          switchboardAddress:\n            options?.switchboardAddress ??\n            ON_DEMAND_MOVEMENT_PORTO_ADDRESS,\n          guardianQueue: options?.guardianQueue ?? ON_DEMAND_MOVEMENT_PORTO_GUARDIAN_QUEUE,\n          oracleQueue: options?.oracleQueue ?? ON_DEMAND_MOVEMENT_PORTO_QUEUE,\n          mainnet: isMainnet,\n        };\n      }\n    } catch (error) {\n      console.error(\"Error fetching Switchboard state, retrying...\");\n      return this.fetchState(options, retries - 1);\n    }\n  }\n}\n\nexport async function axiosAptosClient<Req, Res>(\n  requestOptions: ClientRequest<Req>\n): Promise<ClientResponse<Res>> {\n  const { params, method, url, headers, body } = requestOptions;\n\n  const customHeaders: any = {\n    ...headers,\n    customClient: true,\n  };\n\n  const config: AxiosRequestConfig = {\n    url,\n    method,\n    headers: customHeaders,\n    data: body,\n    params,\n  };\n\n  try {\n    const response = await axios(config);\n    return {\n      status: response.status,\n      statusText: response.statusText,\n      data: response.data,\n      headers: response.headers,\n      config: response.config,\n      request: response.request,\n    };\n  } catch (error: any) {\n    if (axios.isAxiosError(error)) {\n      const errorMessage = error.response?.data?.message;\n      const errorCode = error.response?.data?.error_code;\n\n      if (errorMessage && errorCode) {\n        console.error(`Error: ${errorMessage} (Code: ${errorCode})`);\n      } else {\n        console.error(\"An unknown error occurred.\");\n      }\n    } else {\n      console.error(\"An unexpected error occurred:\", error);\n    }\n  }\n}\n\nexport async function waitForTx(\n  aptos: Aptos,\n  transactionHash: string,\n  maxRetries = 5,\n  initialDelay = 500 // Start with a half-second delay\n) {\n  let retries = 0;\n  let delay = initialDelay;\n\n  while (retries < maxRetries) {\n    try {\n      const result = await aptos.waitForTransaction({\n        transactionHash,\n        options: {\n          timeoutSecs: 30,\n          checkSuccess: true,\n        },\n      });\n      return result;\n    } catch (error) {\n      await new Promise((resolve) => setTimeout(resolve, delay));\n      delay *= 2; // Exponential backoff: double the delay\n      retries++;\n    }\n  }\n\n  throw new Error(`Transaction not found after ${maxRetries} retries.`);\n}\n\nexport function updateToBCS(update: number[][]): MoveVector<MoveVector<U8>> {\n  return new MoveVector<MoveVector<U8>>(update.map((u) => MoveVector.U8(u)));\n}\n"]}