"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SwitchboardClient = exports.solanaProgramCache = exports.aptosQueueCache = exports.ON_DEMAND_MOVEMENT_PORTO_GUARDIAN_QUEUE = exports.ON_DEMAND_MOVEMENT_PORTO_QUEUE = exports.ON_DEMAND_MOVEMENT_PORTO_ADDRESS = exports.ON_DEMAND_TESTNET_GUARDIAN_QUEUE = exports.ON_DEMAND_TESTNET_QUEUE = exports.ON_DEMAND_TESTNET_ADDRESS = exports.ON_DEMAND_MAINNET_GUARDIAN_QUEUE = exports.ON_DEMAND_MAINNET_QUEUE = exports.ON_DEMAND_MAINNET_ADDRESS = exports.ON_DEMAND_DEVNET_QUEUE_KEY = exports.ON_DEMAND_MAINNET_QUEUE_KEY = void 0;
exports.axiosAptosClient = axiosAptosClient;
exports.waitForTx = waitForTx;
exports.updateToBCS = updateToBCS;
var ttlcache_1 = require("@brokerloop/ttlcache");
var on_demand_1 = require("@switchboard-xyz/on-demand");
var ts_sdk_1 = require("@aptos-labs/ts-sdk");
var axios_1 = __importDefault(require("axios"));
__exportStar(require("./aggregator/index.js"), exports);
__exportStar(require("./oracle/index.js"), exports);
__exportStar(require("./queue/index.js"), exports);
__exportStar(require("@switchboard-xyz/common"), exports);
exports.ON_DEMAND_MAINNET_QUEUE_KEY = on_demand_1.ON_DEMAND_MAINNET_QUEUE.toBase58();
exports.ON_DEMAND_DEVNET_QUEUE_KEY = on_demand_1.ON_DEMAND_DEVNET_QUEUE.toBase58();
exports.ON_DEMAND_MAINNET_ADDRESS = "0xfea54925b5ac1912331e2e62049849b37842efaea298118b66f85a59057752b8";
exports.ON_DEMAND_MAINNET_QUEUE = "0x7fdf7235bf3bd872ad093927deb2ff5f1645d1b6dabbfd4a03c3e0442788ce12";
exports.ON_DEMAND_MAINNET_GUARDIAN_QUEUE = "0x3434a45114f5f8fc577557a9a3dda54c1799fee5271313f2599a1093c4a8ba01";
exports.ON_DEMAND_TESTNET_ADDRESS = "0x4fc1809ffb3c5ada6b4e885d4dbdbeb70cbdd99cbc0c8485965d95c2eab90935";
exports.ON_DEMAND_TESTNET_QUEUE = "0xe898232691709ed4f47827a100aac2ca8ea5b27692b5d694b00cb4b2c714e760";
exports.ON_DEMAND_TESTNET_GUARDIAN_QUEUE = "0x17ce931b15d5c4ca8f8e6a5b6b84e2aee44002e5fc5cb4cf00817bb462b56c4a";
exports.ON_DEMAND_MOVEMENT_PORTO_ADDRESS = "0xfa416028d48a85cd7791c8a93c438ce8a750af333a53fde55b276fd4aa16275f";
exports.ON_DEMAND_MOVEMENT_PORTO_QUEUE = "0x4e445d2968329979b34df2606a65e962ad15a540885fdcbb19eaf7a2a5bf4a22";
exports.ON_DEMAND_MOVEMENT_PORTO_GUARDIAN_QUEUE = "0x63be642227d71ba56713d2cdb2efd13de0fb7d9783761e4d7f18327c7336f994";
// ==============================================================================
// Caching for Fetch Update Ix
// 1 min cache for sui cache
exports.aptosQueueCache = new ttlcache_1.TTLCache({
    ttl: 1000 * 60,
});
// 5 min solana queue cache - reloads the sol program every 5 minutes max
exports.solanaProgramCache = new ttlcache_1.TTLCache({
    ttl: 1000 * 60 * 5,
});
var SwitchboardClient = /** @class */ (function () {
    function SwitchboardClient(aptos, chain) {
        this.aptos = aptos;
        this.chain = chain;
        this.state = this.fetchState();
    }
    /**
     * Fetch the correct addresses for the current network
     * @param retries Number of retries to fetch the state
     */
    SwitchboardClient.prototype.fetchState = function (options_1) {
        return __awaiter(this, arguments, void 0, function (options, retries) {
            var isMainnet, isAptos;
            var _a, _b, _c, _d, _e, _f, _g, _h, _j;
            if (retries === void 0) { retries = 3; }
            return __generator(this, function (_k) {
                if (retries <= 0) {
                    throw new Error("Failed to fetch Switchboard state after multiple attempts");
                }
                isMainnet = this.aptos.config.network === ts_sdk_1.Network.MAINNET;
                isAptos = this.chain === "aptos" || !this.chain;
                try {
                    if (ts_sdk_1.Network.MAINNET === this.aptos.config.network && isAptos) {
                        return [2 /*return*/, {
                                switchboardAddress: (_a = options === null || options === void 0 ? void 0 : options.switchboardAddress) !== null && _a !== void 0 ? _a : exports.ON_DEMAND_MAINNET_ADDRESS,
                                guardianQueue: (_b = options === null || options === void 0 ? void 0 : options.guardianQueue) !== null && _b !== void 0 ? _b : exports.ON_DEMAND_MAINNET_GUARDIAN_QUEUE,
                                oracleQueue: (_c = options === null || options === void 0 ? void 0 : options.oracleQueue) !== null && _c !== void 0 ? _c : exports.ON_DEMAND_MAINNET_QUEUE,
                                mainnet: isMainnet,
                            }];
                    }
                    else if (ts_sdk_1.Network.TESTNET === this.aptos.config.network && isAptos) {
                        return [2 /*return*/, {
                                switchboardAddress: (_d = options === null || options === void 0 ? void 0 : options.switchboardAddress) !== null && _d !== void 0 ? _d : exports.ON_DEMAND_TESTNET_ADDRESS,
                                guardianQueue: (_e = options === null || options === void 0 ? void 0 : options.guardianQueue) !== null && _e !== void 0 ? _e : exports.ON_DEMAND_TESTNET_GUARDIAN_QUEUE,
                                oracleQueue: (_f = options === null || options === void 0 ? void 0 : options.oracleQueue) !== null && _f !== void 0 ? _f : exports.ON_DEMAND_TESTNET_QUEUE,
                                mainnet: isMainnet,
                            }];
                    }
                    else if (this.chain === "porto") {
                        return [2 /*return*/, {
                                switchboardAddress: (_g = options === null || options === void 0 ? void 0 : options.switchboardAddress) !== null && _g !== void 0 ? _g : exports.ON_DEMAND_MOVEMENT_PORTO_ADDRESS,
                                guardianQueue: (_h = options === null || options === void 0 ? void 0 : options.guardianQueue) !== null && _h !== void 0 ? _h : exports.ON_DEMAND_MOVEMENT_PORTO_GUARDIAN_QUEUE,
                                oracleQueue: (_j = options === null || options === void 0 ? void 0 : options.oracleQueue) !== null && _j !== void 0 ? _j : exports.ON_DEMAND_MOVEMENT_PORTO_QUEUE,
                                mainnet: isMainnet,
                            }];
                    }
                }
                catch (error) {
                    console.error("Error fetching Switchboard state, retrying...");
                    return [2 /*return*/, this.fetchState(options, retries - 1)];
                }
                return [2 /*return*/];
            });
        });
    };
    return SwitchboardClient;
}());
exports.SwitchboardClient = SwitchboardClient;
function axiosAptosClient(requestOptions) {
    return __awaiter(this, void 0, void 0, function () {
        var params, method, url, headers, body, customHeaders, config, response, error_1, errorMessage, errorCode;
        var _a, _b, _c, _d;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    params = requestOptions.params, method = requestOptions.method, url = requestOptions.url, headers = requestOptions.headers, body = requestOptions.body;
                    customHeaders = __assign(__assign({}, headers), { customClient: true });
                    config = {
                        url: url,
                        method: method,
                        headers: customHeaders,
                        data: body,
                        params: params,
                    };
                    _e.label = 1;
                case 1:
                    _e.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, (0, axios_1.default)(config)];
                case 2:
                    response = _e.sent();
                    return [2 /*return*/, {
                            status: response.status,
                            statusText: response.statusText,
                            data: response.data,
                            headers: response.headers,
                            config: response.config,
                            request: response.request,
                        }];
                case 3:
                    error_1 = _e.sent();
                    if (axios_1.default.isAxiosError(error_1)) {
                        errorMessage = (_b = (_a = error_1.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.message;
                        errorCode = (_d = (_c = error_1.response) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.error_code;
                        if (errorMessage && errorCode) {
                            console.error("Error: ".concat(errorMessage, " (Code: ").concat(errorCode, ")"));
                        }
                        else {
                            console.error("An unknown error occurred.");
                        }
                    }
                    else {
                        console.error("An unexpected error occurred:", error_1);
                    }
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    });
}
function waitForTx(aptos_1, transactionHash_1) {
    return __awaiter(this, arguments, void 0, function (aptos, transactionHash, maxRetries, initialDelay // Start with a half-second delay
    ) {
        var retries, delay, result, error_2;
        if (maxRetries === void 0) { maxRetries = 5; }
        if (initialDelay === void 0) { initialDelay = 500; }
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    retries = 0;
                    delay = initialDelay;
                    _a.label = 1;
                case 1:
                    if (!(retries < maxRetries)) return [3 /*break*/, 7];
                    _a.label = 2;
                case 2:
                    _a.trys.push([2, 4, , 6]);
                    return [4 /*yield*/, aptos.waitForTransaction({
                            transactionHash: transactionHash,
                            options: {
                                timeoutSecs: 30,
                                checkSuccess: true,
                            },
                        })];
                case 3:
                    result = _a.sent();
                    return [2 /*return*/, result];
                case 4:
                    error_2 = _a.sent();
                    return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, delay); })];
                case 5:
                    _a.sent();
                    delay *= 2; // Exponential backoff: double the delay
                    retries++;
                    return [3 /*break*/, 6];
                case 6: return [3 /*break*/, 1];
                case 7: throw new Error("Transaction not found after ".concat(maxRetries, " retries."));
            }
        });
    });
}
function updateToBCS(update) {
    return new ts_sdk_1.MoveVector(update.map(function (u) { return ts_sdk_1.MoveVector.U8(u); }));
}
//# sourceMappingURL=index.js.map