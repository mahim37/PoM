{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/aggregator/index.ts"],"names":[],"mappings":"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","sourcesContent":["import BN from \"bn.js\";\nimport type {\n  FeedEvalResponse,\n  Queue as SolanaQueue,\n} from \"@switchboard-xyz/on-demand\";\nimport {\n  getDefaultQueue,\n  getDefaultDevnetQueue,\n  ON_DEMAND_DEVNET_QUEUE,\n  ON_DEMAND_MAINNET_QUEUE,\n  CrossbarClient,\n  OracleJob,\n} from \"@switchboard-xyz/on-demand\";\nimport {\n  SwitchboardClient,\n  CommonOptions,\n  Queue,\n  aptosQueueCache,\n  solanaProgramCache,\n} from \"../index.js\";\nimport { SimpleTransaction, APTOS_COIN } from \"@aptos-labs/ts-sdk\";\nimport { bs58 } from \"@switchboard-xyz/common\";\n\nexport interface AggregatorInitParams extends CommonOptions {\n  name: string;\n  feedHash: string;\n  minSampleSize: number;\n  maxStalenessSeconds: number;\n  maxVariance: number;\n  minResponses: number;\n}\n\nexport interface AggregatorConfigParams extends CommonOptions {\n  aggregator: string;\n  name: string;\n  feedHash: string;\n  minSampleSize: number;\n  maxStalenessSeconds: number;\n  maxVariance: number;\n  minResponses: number;\n}\n\nexport interface AggregatorSetAuthorityParams extends CommonOptions {\n  aggregator: string;\n  newAuthority: string;\n}\n\nexport interface AggregatorConfigs {\n  feedHash: string;\n  maxVariance: number;\n  minResponses: number;\n  minSampleSize: number;\n}\n\nexport interface AggregatorFetchUpdateIxParams extends CommonOptions {\n  solanaRPCUrl?: string;\n  crossbarUrl?: string;\n  crossbarClient?: CrossbarClient;\n\n  // If passed in, Aptos Aggregator load can be skipped\n  feedConfigs?: AggregatorConfigs;\n\n  // If passed in, Aptos Queue load can be skipped\n  queue?: Queue;\n\n  // If passed in, update will be condensed into a single tx returned\n  getUpdateTx?: boolean;\n\n}\n\nexport interface CurrentResult {\n  maxResult: BN;\n  maxTimestamp: number;\n  mean: BN;\n  minResult: BN;\n  minTimestamp: number;\n  range: BN;\n  result: BN;\n  stdev: BN;\n}\n\nexport interface Update {\n  oracle: string;\n  value: BN;\n  timestamp: number;\n}\n\nexport interface AggregatorData {\n  address: string;\n  authority: string;\n  createdAt: number;\n  currentResult: CurrentResult;\n  feedHash: string;\n  maxStalenessSeconds: number;\n  maxVariance: number;\n  minResponses: number;\n  minSampleSize: number;\n  name: string;\n  queue: string;\n  updateState: {\n    currIdx: number;\n    results: Update[];\n  };\n}\n\nexport class Aggregator {\n  public crossbarClient?: CrossbarClient;\n  public feedHash?: string;\n\n  constructor(readonly client: SwitchboardClient, readonly address: string) {}\n\n  public static async initTx(\n    client: SwitchboardClient,\n    sender: string,\n    options: AggregatorInitParams\n  ): Promise<SimpleTransaction> {\n    const { switchboardAddress, oracleQueue } = await client.fetchState(\n      options\n    );\n\n    const transaction = await client.aptos.transaction.build.simple({\n      sender,\n      data: {\n        function: `${switchboardAddress}::aggregator_init_action::run`,\n        functionArguments: [\n          oracleQueue,\n          options.name,\n          Array.from(Buffer.from(options.feedHash.slice(2), \"hex\")),\n          options.minSampleSize,\n          options.maxStalenessSeconds,\n          options.maxVariance,\n          options.minResponses,\n        ],\n      },\n    });\n\n    return transaction;\n  }\n\n  /**\n   * Set configs for the Aggregator\n   * @param tx - Transaction\n   * @param options - AggregatorConfigParams\n   */\n  public async setConfigsTx(\n    sender: string,\n    options: AggregatorConfigParams\n  ): Promise<SimpleTransaction> {\n    const { switchboardAddress } = await this.client.fetchState(options);\n\n    const transaction = await this.client.aptos.transaction.build.simple({\n      sender,\n      data: {\n        function: `${switchboardAddress}::aggregator_set_configs_action::run`,\n        functionArguments: [\n          this.address,\n          options.name,\n          Array.from(Buffer.from(options.feedHash.slice(2), \"hex\")),\n          options.minSampleSize,\n          options.maxStalenessSeconds,\n          options.maxVariance,\n          options.minResponses,\n        ],\n      },\n    });\n\n    return transaction;\n  }\n\n  /**\n   * Set the feed authority\n   * @param tx - Transaction\n   * @param options - AggregatorSetAuthorityParams\n   */\n  public async setAuthorityTx(\n    options: AggregatorSetAuthorityParams\n  ): Promise<SimpleTransaction> {\n    const { switchboardAddress } = await this.client.fetchState(options);\n\n    const transaction = await this.client.aptos.transaction.build.simple({\n      sender: options.newAuthority,\n      data: {\n        function: `${switchboardAddress}::aggregator_set_authority_action::run`,\n        functionArguments: [this.address, options.newAuthority],\n      },\n    });\n\n    return transaction;\n  }\n\n  /**\n   * Fetch the update transaction\n   * @param sender - Sender\n   * @param options - AggregatorFetchUpdateIxParams\n   * @returns - FetchUpdateTxResponse\n   */\n  public async fetchUpdate(\n    sender: string,\n    options?: AggregatorFetchUpdateIxParams\n  ): Promise<{\n    responses: FeedEvalResponse[];\n    failures: string[];\n    updates: number[][];\n    updateTx: SimpleTransaction;\n  }> {\n    const { switchboardAddress } = await this.client.fetchState(options);\n\n    let oracleQueue: string;\n\n    // get the feed configs if we need them / they aren't passed in\n    let feedConfigs = options?.feedConfigs;\n    if (!feedConfigs) {\n      const aggregatorData = await this.loadData();\n      oracleQueue = aggregatorData.queue;\n      feedConfigs = {\n        minSampleSize: aggregatorData.minSampleSize,\n        feedHash: aggregatorData.feedHash,\n        maxVariance: aggregatorData.maxVariance,\n        minResponses: aggregatorData.minResponses,\n      };\n    }\n\n    if (!oracleQueue) {\n      throw new Error(\"[fetchUpdateTx]: ORACLE QUEUE NOT FOUND\");\n    }\n\n    // get the queue from cache\n    let aptosQueue = aptosQueueCache.get(oracleQueue);\n    if (!aptosQueue) {\n      const queue = await new Queue(this.client, oracleQueue).loadData();\n      aptosQueueCache.set(oracleQueue, queue);\n      aptosQueue = queue;\n    }\n\n    console.log(aptosQueue);\n\n    // load the solana queue from cache or fetch it\n    let solanaQueue: SolanaQueue;\n    if (aptosQueue.queueKey == ON_DEMAND_MAINNET_QUEUE.toBase58()) {\n      solanaQueue = solanaProgramCache.get(ON_DEMAND_MAINNET_QUEUE.toBase58());\n      if (!solanaQueue) {\n        solanaQueue = await getDefaultQueue(options?.solanaRPCUrl);\n        solanaProgramCache.set(ON_DEMAND_MAINNET_QUEUE.toBase58(), solanaQueue);\n      }\n    } else if (aptosQueue.queueKey == ON_DEMAND_DEVNET_QUEUE.toBase58()) {\n      solanaQueue = solanaProgramCache.get(ON_DEMAND_DEVNET_QUEUE.toBase58());\n      if (!solanaQueue) {\n        solanaQueue = await getDefaultDevnetQueue(options?.solanaRPCUrl);\n        solanaProgramCache.set(ON_DEMAND_DEVNET_QUEUE.toBase58(), solanaQueue);\n      }\n    } else {\n      throw new Error(\"[fetchUpdateTx]: QUEUE NOT FOUND\");\n    }\n\n    // fail out if we can't load the queue\n    if (!solanaQueue) {\n      throw new Error(\n        `Could not load the Switchboard Queue - Queue pubkey: ${aptosQueue.queueKey}`\n      );\n    }\n\n    // get the crossbar client\n    const crossbarClient =\n      options?.crossbarClient ??\n      new CrossbarClient(\n        options?.crossbarUrl ?? \"https://crossbar.switchboard.xyz\"\n      );\n\n    // fetch the jobs\n    const jobs: OracleJob[] = await crossbarClient\n      .fetch(feedConfigs.feedHash)\n      .then((res) => res.jobs.map((job) => OracleJob.fromObject(job)));\n\n      \n    const fetchUpdateData = async () => {\n\n      // fetch the signatures\n      const { responses, failures } = await solanaQueue.fetchSignatures({\n        jobs,\n\n        // Make this more granular in the canonical fetch signatures (within @switchboard-xyz/on-demand)\n        maxVariance: Math.floor(feedConfigs.maxVariance / 1e9),\n        minResponses: feedConfigs.minResponses,\n        numSignatures: feedConfigs.minSampleSize,\n\n        // blockhash checks aren't possible yet on SUI\n        recentHash: bs58.encode(new Uint8Array(32)),\n        useTimestamp: true,\n      });\n\n      // filter out responses that don't have available oracles\n      const validOracles = new Set(\n        aptosQueue.existingOracles.map((o) => o.oracleKey)\n      );\n\n      // filter out responses that don't have available oracles\n      const validResponses = responses.filter((r) => {\n        return validOracles.has(bs58.encode(Buffer.from(r.oracle_pubkey, \"hex\")));\n      });\n\n      // if we have no valid responses (or not enough), fail out\n      if (\n        !validResponses.length ||\n        validResponses.length < feedConfigs.minSampleSize\n      ) {\n        // maybe retry by recursing into the same function / add a retry count\n        throw new Error(\"Not enough valid oracle responses.\");\n      }\n\n      // update strings to build the single update string\n      const updates = [];\n\n      // map the responses into the tx\n      for (const response of validResponses) {\n        const oracle = aptosQueue.existingOracles.find(\n          (o) =>\n            o.oracleKey == bs58.encode(Buffer.from(response.oracle_pubkey, \"hex\"))\n        );\n\n        if (!oracle) {\n          return;\n        }\n\n        // Get the data from the response\n        const signature = Array.from(Buffer.from(response.signature, \"base64\"));\n        signature.push(response.recovery_id);\n        const aggregatorAddress = this.address;\n        const timestamp = response.timestamp;\n        const value = response.success_value;\n\n        // build update array\n        const updateBytes = [];\n       \n        // discriminator\n        updateBytes.push(1);\n\n        // format the feed address\n        const feedAddress = Array.from(Buffer.from(aggregatorAddress.startsWith(\"0x\") ? aggregatorAddress.slice(2) : aggregatorAddress, \"hex\"));\n        if (feedAddress.length < 32) {\n          feedAddress.unshift(0);\n        }\n\n        // push feed address\n        updateBytes.push(\n          ...feedAddress\n        );\n\n        // push value\n        updateBytes.push(...Array.from(this.i128ToUint8Array(BigInt(value))));\n\n        // push r\n        updateBytes.push(...signature.slice(0, 32));\n\n        // push s\n        updateBytes.push(...signature.slice(32, 64));\n\n        // push v\n        updateBytes.push(signature[64]);\n\n        // push block number (zeroed out for now - bytes32 0)\n        updateBytes.push(...Array(8).fill(0));\n\n        // push timestamp\n        const timestampBuffer = Buffer.alloc(8);\n        timestampBuffer.writeBigInt64BE(BigInt(timestamp), 0);\n        updateBytes.push(...Array.from(timestampBuffer));\n\n        // push oracle address\n        updateBytes.push(\n          ...Array.from(bs58.decode(oracle.oracleKey))\n        );\n\n        // push the update bytes\n        updates.push(updateBytes);\n      }\n\n      // get the transaction for update\n      const updateTx = await this.client.aptos.transaction.build.simple({\n        sender,\n        data: {\n          function: `${switchboardAddress}::update_action::run`,\n          functionArguments: [updates],\n          typeArguments: [APTOS_COIN],\n        },\n        withFeePayer: true,\n      });\n\n      return { responses, failures, updates, updateTx };\n    }\n\n    // try to fetch the update data (retry up to 3 times)\n    let fetchUpdateDataRetries = 0;\n    let fetchUpdateDataResponse: {\n      responses: FeedEvalResponse[];\n      failures: string[];\n      updates: number[][];\n      updateTx: SimpleTransaction;\n    };\n\n    // try to fetch the update data (retry up to 5 times)\n    while (fetchUpdateDataRetries < 5) {\n      try {\n        fetchUpdateDataResponse = await fetchUpdateData();\n        break;\n      } catch (e) {\n        fetchUpdateDataRetries++;\n        console.log(\"Failed to fetch update data, retrying...\");\n      }\n    }\n\n    // fail out if we can't fetch the update data\n    if (!fetchUpdateDataResponse) {\n      throw new Error(\"Failed to fetch update data\");\n    }\n\n    // return the response\n    return fetchUpdateDataResponse;\n  }\n\n  public static parseAggregatorData(resource: any): AggregatorData {\n    const data: AggregatorData = {\n      address: resource.aggregator_address,\n      authority: resource.authority,\n      createdAt: parseInt(resource.created_at),\n      currentResult: {\n        maxResult: new BN(resource.current_result.max_result.value).mul(\n          new BN(resource.current_result.max_result.neg ? -1 : 1)\n        ),\n        maxTimestamp: parseInt(resource.current_result.max_timestamp),\n        mean: new BN(resource.current_result.mean.value).mul(\n          new BN(resource.current_result.mean.neg ? -1 : 1)\n        ),\n        minResult: new BN(resource.current_result.min_result.value).mul(\n          new BN(resource.current_result.min_result.neg ? -1 : 1)\n        ),\n        minTimestamp: parseInt(resource.current_result.min_timestamp),\n        range: new BN(resource.current_result.range.value).mul(\n          new BN(resource.current_result.range.neg ? -1 : 1)\n        ),\n        result: new BN(resource.current_result.result.value).mul(\n          new BN(resource.current_result.result.neg ? -1 : 1)\n        ),\n        stdev: new BN(resource.current_result.stdev.value).mul(\n          new BN(resource.current_result.stdev.neg ? -1 : 1)\n        ),\n      },\n      feedHash: resource.feed_hash,\n      maxStalenessSeconds: parseInt(resource.max_staleness_seconds),\n      maxVariance: parseInt(resource.max_variance),\n      minResponses: parseInt(resource.min_responses),\n      minSampleSize: parseInt(resource.min_sample_size),\n      name: resource.name,\n      queue: resource.queue,\n      updateState: {\n        currIdx: parseInt(resource.update_state.curr_idx),\n        results: resource.update_state.results.map((r: any) => {\n          const oracle = r.oracle;\n          const value = new BN(r.result.value).mul(r.result.neg ? new BN(-1) : new BN(1));\n          const timestamp = parseInt(r.timestamp);\n          return {\n            oracle,\n            value,\n            timestamp,\n          };\n        }),\n      },\n    };\n\n    return data;\n  }\n\n  /**\n   * Get the feed data object\n   */\n  public async loadData(): Promise<AggregatorData> {\n    const { switchboardAddress } = await this.client.fetchState();\n    const resources = await this.client.aptos.view({\n      payload: {\n        function: `${switchboardAddress}::aggregator::view_aggregator`,\n        functionArguments: [this.address],\n      },\n    });\n    const resource = resources[0] as any;\n    \n    // return the data object\n    return Aggregator.parseAggregatorData(resource);\n  }\n\n  /**\n   * Load all feeds\n   */\n  public static async loadAllFeeds(\n    switchboardClient: SwitchboardClient,\n  ) {\n    const { switchboardAddress, oracleQueue } = await switchboardClient.fetchState();\n    const resourcesResponse = await switchboardClient.aptos.view({\n      payload: {\n        function: `${switchboardAddress}::aggregator::view_queue_aggregators`,\n        functionArguments: [oracleQueue],\n      },\n    });\n    const resources = resourcesResponse[0] as any;\n    const aggregators: AggregatorData[] = resources.map((resource: any) => this.parseAggregatorData(resource));\n    return aggregators;\n  }\n\n  private i128ToUint8Array(value: bigint): Uint8Array {\n\n    // Prepare an array of 16 bytes (128 bits).\n    const result = new Uint8Array(16);\n\n    // Convert the absolute value to Big-Endian bytes\n    let absValue = value < 0 ? -value : value;\n    for (let i = 15; i >= 0; i--) {\n      result[i] = Number(absValue & BigInt(0xFF));\n      absValue = absValue >> BigInt(8);\n    }\n\n    // If it's a negative number, apply two's complement\n    if (value < 0) {\n      for (let i = 0; i < 16; i++) {\n        result[i] = ~result[i] & 0xFF;\n      }\n\n      // Add one to complete the two's complement\n      for (let i = 15; i >= 0; i--) {\n        result[i] = (result[i] + 1) & 0xFF;\n        if (result[i] !== 0) break; // Stop if there was no overflow\n      }\n    }\n\n    return result;\n  }\n}\n\n// Alias Aggregator to PullFeed\nexport const PullFeed = Aggregator;\n"]}