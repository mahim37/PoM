{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/queue/index.ts"],"names":[],"mappings":"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","sourcesContent":["import type { CommonOptions, OracleData, SwitchboardClient } from \"../index.js\";\nimport { SimpleTransaction } from \"@aptos-labs/ts-sdk\";\nimport { bs58 } from \"@switchboard-xyz/common\";\n\nexport interface QueueInitParams extends CommonOptions {\n  queueKey: string;\n  authority: string;\n  name: string;\n  fee: number;\n  feeRecipient: string;\n  minAttestations: number;\n  oracleValidityLength: number;\n  guardianQueue?: string;\n  isGuardianQueue?: boolean;\n}\n\nexport interface QueueSetConfigsParams extends CommonOptions {\n  name: string;\n  fee: number;\n  feeRecipient: string;\n  minAttestations: number;\n  oracleValidityLength: number;\n}\n\nexport interface QueueSetAuthorityParams extends CommonOptions {\n  newAuthority: string;\n}\n\nexport interface QueueOverrideOracleParams extends CommonOptions {\n  oracle: string;\n  secp256k1Key: Uint8Array;\n  mrEnclave: Uint8Array;\n  expirationTime: number;\n}\n\nexport interface QueueSetFeeTypeParams extends CommonOptions {\n  feeType: string;\n}\n\nexport interface QueueData {\n  authority: string;\n  existingOracles: {\n    oracle: string;\n    oracleKey: string;\n  }[];\n  fee: number;\n  feeRecipient: string;\n  feeTypes: string[];\n  guardianQueue: string;\n  address: string;\n  lastQueueOverride: number;\n  minAttestations: number;\n  name: string;\n  oracleValidityLength: number;\n  queueKey: string;\n}\n\nexport class Queue {\n  constructor(readonly client: SwitchboardClient, readonly address: string) {}\n\n  /**\n   * Create a new Queue\n   */\n  public static async initTx(\n    client: SwitchboardClient,\n    sender: string,\n    options: QueueInitParams\n  ): Promise<SimpleTransaction> {\n    const { switchboardAddress } = await client.fetchState(options);\n    if (options.isGuardianQueue) {\n      return client.aptos.transaction.build.simple({\n        sender,\n        data: {\n          function: `${switchboardAddress}::guardian_queue_init_action::run`,\n          functionArguments: [\n            Array.from(Buffer.from(options.queueKey, \"hex\")),\n            options.name,\n            options.fee,\n            options.feeRecipient,\n            options.minAttestations,\n            options.oracleValidityLength,\n          ],\n        },\n      });\n    } else {\n      if (!options.guardianQueue) {\n        throw new Error(\"guardianQueueId is required for non-guardian queues\");\n      }\n      return client.aptos.transaction.build.simple({\n        sender,\n        data: {\n          function: `${switchboardAddress}::oracle_queue_init_action::run`,\n          functionArguments: [\n            Array.from(Buffer.from(options.queueKey, \"hex\")),\n            options.name,\n            options.fee,\n            options.feeRecipient,\n            options.minAttestations,\n            options.oracleValidityLength,\n            options.guardianQueue,\n          ],\n        },\n      });\n    }\n  }\n\n  /**\n   * Queue set configs tx\n   */\n  public async setConfigsTx(\n    sender: string,\n    options: QueueSetConfigsParams\n  ): Promise<SimpleTransaction> {\n    const { switchboardAddress } = await this.client.fetchState(options);\n    return this.client.aptos.transaction.build.simple({\n      sender,\n      data: {\n        function: `${switchboardAddress}::queue_set_configs_action::run`,\n        functionArguments: [\n          this.address,\n          options.name,\n          options.fee,\n          options.feeRecipient,\n          options.minAttestations,\n          options.oracleValidityLength,\n        ],\n      },\n    });\n  }\n\n  /**\n   * Queue set authority tx\n   */\n  public async setAuthorityTx(\n    sender: string,\n    options: QueueSetAuthorityParams\n  ): Promise<SimpleTransaction> {\n    const { switchboardAddress } = await this.client.fetchState(options);\n    return this.client.aptos.transaction.build.simple({\n      sender,\n      data: {\n        function: `${switchboardAddress}::queue_set_authority_action::run`,\n        functionArguments: [this.address, options.newAuthority],\n      },\n    });\n  }\n\n  /**\n   * Queue override oracle tx\n   */\n  public async overrideOracleTx(\n    sender: string,\n    options: QueueOverrideOracleParams\n  ): Promise<SimpleTransaction> {\n    const { switchboardAddress } = await this.client.fetchState(options);\n    return this.client.aptos.transaction.build.simple({\n      sender,\n      data: {\n        function: `${switchboardAddress}::queue_override_oracle_action::run`,\n        functionArguments: [\n          this.address,\n          options.oracle,\n          Array.from(options.secp256k1Key),\n          Array.from(options.mrEnclave),\n          options.expirationTime,\n        ],\n      },\n    });\n  }\n\n  /**\n   * Queue add fee type tx\n   */\n  public async addFeeTypeTx(sender: string, options: QueueSetFeeTypeParams) {\n    const { switchboardAddress } = await this.client.fetchState(options);\n    return this.client.aptos.transaction.build.simple({\n      sender,\n      data: {\n        function: `${switchboardAddress}::queue_add_fee_coin_action::run`,\n        functionArguments: [this.address],\n        typeArguments: [options.feeType],\n      },\n    });\n  }\n\n  /**\n   * Queue remove fee type tx\n   */\n  public async removeFeeTypeTx(sender: string, options: QueueSetFeeTypeParams) {\n    const { switchboardAddress } = await this.client.fetchState(options);\n    return this.client.aptos.transaction.build.simple({\n      sender,\n      data: {\n        function: `${switchboardAddress}::queue_remove_fee_coin_action::run`,\n        functionArguments: [this.address],\n        typeArguments: [options.feeType],\n      },\n    });\n  }\n\n  private formatType(type: {\n    account_address: string;\n    module_name: string;\n    struct_name: string;\n  }): string {\n    const decodedModuleName = Buffer.from(\n      type.module_name.slice(2),\n      \"hex\"\n    ).toString(\"utf-8\");\n    const decodedStructName = Buffer.from(\n      type.struct_name.slice(2),\n      \"hex\"\n    ).toString(\"utf-8\");\n\n    return `${type.account_address}::${decodedModuleName}::${decodedStructName}`;\n  }\n\n  /**\n   * Get the queue data object\n   */\n  public async loadData(): Promise<QueueData> {\n    const { switchboardAddress } = await this.client.fetchState();\n\n    const resources = await this.client.aptos.view({\n      payload: {\n        function: `${switchboardAddress}::queue::view_queue`,\n        functionArguments: [this.address],\n      },\n    });\n\n    const resource = resources[0] as any;\n\n    // parse the data into the correct types\n    const data: QueueData = {\n      authority: resource.authority,\n      existingOracles: resource.all_oracles.map((o: any) => ({\n        oracle: o.oracle,\n        oracleKey: bs58.encode(Buffer.from(o.oracle_key.slice(2), \"hex\")),\n      })),\n      fee: parseInt(resource.fee),\n      feeRecipient: resource.fee_recipient,\n      feeTypes: resource.fee_types.map((ft: any) => this.formatType(ft)),\n      guardianQueue: resource.guardian_queue,\n      address: this.address,\n      lastQueueOverride: parseInt(resource.last_queue_override),\n      minAttestations: parseInt(resource.min_attestations),\n      name: resource.name,\n      oracleValidityLength: parseInt(resource.oracle_validity_length),\n      queueKey: bs58.encode(Buffer.from(resource.queue_key.slice(2), \"hex\")),\n    };\n\n    return data;\n  }\n\n  public async loadOracles(): Promise<OracleData[]> {\n    const { switchboardAddress } = await this.client.fetchState();\n    const resourcesResponse = await this.client.aptos.view({\n      payload: {\n        function: `${switchboardAddress}::oracle::view_queue_oracles`,\n        functionArguments: [this.address],\n      },\n    });\n\n    if (resourcesResponse.length === 0) {\n      return [];\n    }\n\n    const resources = resourcesResponse[0] as any;\n\n    const oracles: OracleData[] = resources.map((resource: any) => {\n      return {\n        expirationTime: parseInt(resource.expiration_time),\n        address: resource.oracle_address,\n        mrEnclave: resource.mr_enclave,\n        oracleKey: bs58.encode(\n          Buffer.from(resource.oracle_key.slice(2), \"hex\")\n        ),\n        queue: resource.queue,\n        queueKey: bs58.encode(Buffer.from(resource.queue_key.slice(2), \"hex\")),\n        secp256k1Key: resource.secp256k1_key,\n        validAttestations: resource.valid_attestations,\n      };\n    });\n    return oracles;\n  }\n}\n"]}