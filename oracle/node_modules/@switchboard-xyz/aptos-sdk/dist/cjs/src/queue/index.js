"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Queue = void 0;
var common_1 = require("@switchboard-xyz/common");
var Queue = /** @class */ (function () {
    function Queue(client, address) {
        this.client = client;
        this.address = address;
    }
    /**
     * Create a new Queue
     */
    Queue.initTx = function (client, sender, options) {
        return __awaiter(this, void 0, void 0, function () {
            var switchboardAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, client.fetchState(options)];
                    case 1:
                        switchboardAddress = (_a.sent()).switchboardAddress;
                        if (options.isGuardianQueue) {
                            return [2 /*return*/, client.aptos.transaction.build.simple({
                                    sender: sender,
                                    data: {
                                        function: "".concat(switchboardAddress, "::guardian_queue_init_action::run"),
                                        functionArguments: [
                                            Array.from(Buffer.from(options.queueKey, "hex")),
                                            options.name,
                                            options.fee,
                                            options.feeRecipient,
                                            options.minAttestations,
                                            options.oracleValidityLength,
                                        ],
                                    },
                                })];
                        }
                        else {
                            if (!options.guardianQueue) {
                                throw new Error("guardianQueueId is required for non-guardian queues");
                            }
                            return [2 /*return*/, client.aptos.transaction.build.simple({
                                    sender: sender,
                                    data: {
                                        function: "".concat(switchboardAddress, "::oracle_queue_init_action::run"),
                                        functionArguments: [
                                            Array.from(Buffer.from(options.queueKey, "hex")),
                                            options.name,
                                            options.fee,
                                            options.feeRecipient,
                                            options.minAttestations,
                                            options.oracleValidityLength,
                                            options.guardianQueue,
                                        ],
                                    },
                                })];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Queue set configs tx
     */
    Queue.prototype.setConfigsTx = function (sender, options) {
        return __awaiter(this, void 0, void 0, function () {
            var switchboardAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.fetchState(options)];
                    case 1:
                        switchboardAddress = (_a.sent()).switchboardAddress;
                        return [2 /*return*/, this.client.aptos.transaction.build.simple({
                                sender: sender,
                                data: {
                                    function: "".concat(switchboardAddress, "::queue_set_configs_action::run"),
                                    functionArguments: [
                                        this.address,
                                        options.name,
                                        options.fee,
                                        options.feeRecipient,
                                        options.minAttestations,
                                        options.oracleValidityLength,
                                    ],
                                },
                            })];
                }
            });
        });
    };
    /**
     * Queue set authority tx
     */
    Queue.prototype.setAuthorityTx = function (sender, options) {
        return __awaiter(this, void 0, void 0, function () {
            var switchboardAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.fetchState(options)];
                    case 1:
                        switchboardAddress = (_a.sent()).switchboardAddress;
                        return [2 /*return*/, this.client.aptos.transaction.build.simple({
                                sender: sender,
                                data: {
                                    function: "".concat(switchboardAddress, "::queue_set_authority_action::run"),
                                    functionArguments: [this.address, options.newAuthority],
                                },
                            })];
                }
            });
        });
    };
    /**
     * Queue override oracle tx
     */
    Queue.prototype.overrideOracleTx = function (sender, options) {
        return __awaiter(this, void 0, void 0, function () {
            var switchboardAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.fetchState(options)];
                    case 1:
                        switchboardAddress = (_a.sent()).switchboardAddress;
                        return [2 /*return*/, this.client.aptos.transaction.build.simple({
                                sender: sender,
                                data: {
                                    function: "".concat(switchboardAddress, "::queue_override_oracle_action::run"),
                                    functionArguments: [
                                        this.address,
                                        options.oracle,
                                        Array.from(options.secp256k1Key),
                                        Array.from(options.mrEnclave),
                                        options.expirationTime,
                                    ],
                                },
                            })];
                }
            });
        });
    };
    /**
     * Queue add fee type tx
     */
    Queue.prototype.addFeeTypeTx = function (sender, options) {
        return __awaiter(this, void 0, void 0, function () {
            var switchboardAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.fetchState(options)];
                    case 1:
                        switchboardAddress = (_a.sent()).switchboardAddress;
                        return [2 /*return*/, this.client.aptos.transaction.build.simple({
                                sender: sender,
                                data: {
                                    function: "".concat(switchboardAddress, "::queue_add_fee_coin_action::run"),
                                    functionArguments: [this.address],
                                    typeArguments: [options.feeType],
                                },
                            })];
                }
            });
        });
    };
    /**
     * Queue remove fee type tx
     */
    Queue.prototype.removeFeeTypeTx = function (sender, options) {
        return __awaiter(this, void 0, void 0, function () {
            var switchboardAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.fetchState(options)];
                    case 1:
                        switchboardAddress = (_a.sent()).switchboardAddress;
                        return [2 /*return*/, this.client.aptos.transaction.build.simple({
                                sender: sender,
                                data: {
                                    function: "".concat(switchboardAddress, "::queue_remove_fee_coin_action::run"),
                                    functionArguments: [this.address],
                                    typeArguments: [options.feeType],
                                },
                            })];
                }
            });
        });
    };
    Queue.prototype.formatType = function (type) {
        var decodedModuleName = Buffer.from(type.module_name.slice(2), "hex").toString("utf-8");
        var decodedStructName = Buffer.from(type.struct_name.slice(2), "hex").toString("utf-8");
        return "".concat(type.account_address, "::").concat(decodedModuleName, "::").concat(decodedStructName);
    };
    /**
     * Get the queue data object
     */
    Queue.prototype.loadData = function () {
        return __awaiter(this, void 0, void 0, function () {
            var switchboardAddress, resources, resource, data;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.fetchState()];
                    case 1:
                        switchboardAddress = (_a.sent()).switchboardAddress;
                        return [4 /*yield*/, this.client.aptos.view({
                                payload: {
                                    function: "".concat(switchboardAddress, "::queue::view_queue"),
                                    functionArguments: [this.address],
                                },
                            })];
                    case 2:
                        resources = _a.sent();
                        resource = resources[0];
                        data = {
                            authority: resource.authority,
                            existingOracles: resource.all_oracles.map(function (o) { return ({
                                oracle: o.oracle,
                                oracleKey: common_1.bs58.encode(Buffer.from(o.oracle_key.slice(2), "hex")),
                            }); }),
                            fee: parseInt(resource.fee),
                            feeRecipient: resource.fee_recipient,
                            feeTypes: resource.fee_types.map(function (ft) { return _this.formatType(ft); }),
                            guardianQueue: resource.guardian_queue,
                            address: this.address,
                            lastQueueOverride: parseInt(resource.last_queue_override),
                            minAttestations: parseInt(resource.min_attestations),
                            name: resource.name,
                            oracleValidityLength: parseInt(resource.oracle_validity_length),
                            queueKey: common_1.bs58.encode(Buffer.from(resource.queue_key.slice(2), "hex")),
                        };
                        return [2 /*return*/, data];
                }
            });
        });
    };
    Queue.prototype.loadOracles = function () {
        return __awaiter(this, void 0, void 0, function () {
            var switchboardAddress, resourcesResponse, resources, oracles;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.client.fetchState()];
                    case 1:
                        switchboardAddress = (_a.sent()).switchboardAddress;
                        return [4 /*yield*/, this.client.aptos.view({
                                payload: {
                                    function: "".concat(switchboardAddress, "::oracle::view_queue_oracles"),
                                    functionArguments: [this.address],
                                },
                            })];
                    case 2:
                        resourcesResponse = _a.sent();
                        if (resourcesResponse.length === 0) {
                            return [2 /*return*/, []];
                        }
                        resources = resourcesResponse[0];
                        oracles = resources.map(function (resource) {
                            return {
                                expirationTime: parseInt(resource.expiration_time),
                                address: resource.oracle_address,
                                mrEnclave: resource.mr_enclave,
                                oracleKey: common_1.bs58.encode(Buffer.from(resource.oracle_key.slice(2), "hex")),
                                queue: resource.queue,
                                queueKey: common_1.bs58.encode(Buffer.from(resource.queue_key.slice(2), "hex")),
                                secp256k1Key: resource.secp256k1_key,
                                validAttestations: resource.valid_attestations,
                            };
                        });
                        return [2 /*return*/, oracles];
                }
            });
        });
    };
    return Queue;
}());
exports.Queue = Queue;
//# sourceMappingURL=index.js.map